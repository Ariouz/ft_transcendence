services:
  ## Website services ##
  website:
    container_name: website
    build: ./website
    ports:
      - ${WEBSITE_PORT}:${WEBSITE_PORT}
      - "8443:8443"
    volumes:
      - type: bind
        source: ./website/src
        target: /usr/share/nginx/html
      - type: bind
        source: ./ssl_certs/selfsigned.crt
        target: /etc/ssl/certs/selfsigned.crt
      - type: bind
        source: ./ssl_certs/selfsigned.key
        target: /etc/ssl/private/selfsigned.key
    environment:
      SSL_CERT_FILE: /etc/ssl/certs/selfsigned.crt

  ## Users management services ##
  users_service:
    build: ./users_service
    container_name: users-service
    restart: always
    ports:
      - ${USERS_SERVICE_PORT}:${USERS_SERVICE_PORT}
    depends_on:
      users_service_database:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      PROJECT_NAME: "users_service"
      APP_PORT: ${USERS_SERVICE_PORT}
      API_42_UID: ${API_42_UID}
      API_42_SECRET: ${API_42_SECRET}
      DATABASE_HOST: ${USERS_DB_CONTAINER_NAME}
      DATABASE_PORT: ${USERS_DB_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_SUPERUSER_EMAIL: ${ADMIN_EMAIL}
      DJANGO_SUPERUSER_USERNAME: ${ADMIN_USERNAME}
      DJANGO_SUPERUSER_PASSWORD: ${ADMIN_PASSWORD}
      DJANGO_SECRET: ${DJANGO_SECRET_USERS}
      DEFAULT_LANGUAGE_CODE: ${DEFAULT_LANGUAGE_CODE}
      HOST_IP: ${HOST_IP}
      SSL_CERT_FILE: /etc/ssl/certs/selfsigned.crt
    volumes:
      - type: bind
        source: ./users_service
        target: /users_service
      - type: bind
        source: ./ssl_certs/selfsigned.crt
        target: /etc/ssl/certs/selfsigned.crt
      - type: bind
        source: ./ssl_certs/selfsigned.key
        target: /etc/ssl/private/selfsigned.key
      

  users_service_database:
    image: postgres:16-alpine
    container_name: ${USERS_DB_CONTAINER_NAME}
    restart: always
    ports:
      - ${USERS_DB_PORT}:${USERS_DB_PORT}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: [ "postgres", "-c", "port=${USERS_DB_PORT}" ]
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER -p ${USERS_DB_PORT} -d $$POSTGRES_DB"
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - users_service_data:/var/lib/postgresql/data

  # pong services
  pong_service:
    build: ./pong_service
    container_name: pong-service
    restart: always
    ports:
      - ${PONG_SERVICE_PORT}:${PONG_SERVICE_PORT}
    depends_on:
      pong_service_database:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      PROJECT_NAME: "pong_service"
      APP_PORT: ${PONG_SERVICE_PORT}
      DATABASE_HOST: ${PONG_DB_CONTAINER_NAME}
      DATABASE_PORT: ${PONG_DB_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_SUPERUSER_EMAIL: ${ADMIN_EMAIL}
      DJANGO_SUPERUSER_USERNAME: ${ADMIN_USERNAME}
      DJANGO_SUPERUSER_PASSWORD: ${ADMIN_PASSWORD}
      DJANGO_SECRET: ${DJANGO_SECRET_PONG}
      DEFAULT_LANGUAGE_CODE: ${DEFAULT_LANGUAGE_CODE}
      HOST_IP: ${HOST_IP}
      SSL_CERT_FILE: /etc/ssl/certs/selfsigned.crt
    volumes:
      - type: bind
        source: ./pong_service
        target: /pong_service
      - type: bind
        source: ./ssl_certs/selfsigned.crt
        target: /etc/ssl/certs/selfsigned.crt
      - type: bind
        source: ./ssl_certs/selfsigned.key
        target: /etc/ssl/private/selfsigned.key

  pong_service_database:
    image: postgres:16-alpine
    container_name: ${PONG_DB_CONTAINER_NAME}
    restart: always
    ports:
      - ${PONG_DB_PORT}:${PONG_DB_PORT}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: [ "postgres", "-c", "port=${PONG_DB_PORT}" ]
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER -p ${PONG_DB_PORT} -d $$POSTGRES_DB"
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pong_service_data:/var/lib/postgresql/data

  ## WebSocket server services ##
  websocket_server:
    build: ./websocket_server
    container_name: websocket_server
    restart: always
    ports:
      - ${WEBSOCKET_SERVER_PORT}:${WEBSOCKET_SERVER_PORT}
    depends_on:
      websocket_server_database:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      PROJECT_NAME: "websocket_server"
      APP_PORT: ${WEBSOCKET_SERVER_PORT}
      DATABASE_HOST: ${WEBSOCKET_DB_CONTAINER_NAME}
      DATABASE_PORT: ${WEBSOCKET_DB_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_SUPERUSER_EMAIL: ${ADMIN_EMAIL}
      DJANGO_SUPERUSER_USERNAME: ${ADMIN_USERNAME}
      DJANGO_SUPERUSER_PASSWORD: ${ADMIN_PASSWORD}
      DJANGO_SECRET: ${DJANGO_SECRET_WEBSOCKET}
      HOST_IP: ${HOST_IP}
      SSL_CERT_FILE: /etc/ssl/certs/selfsigned.crt
    volumes:
      - type: bind
        source: ./websocket_server
        target: /websocket_server
      - type: bind
        source: ./ssl_certs/selfsigned.crt
        target: /etc/ssl/certs/selfsigned.crt
      - type: bind
        source: ./ssl_certs/selfsigned.key
        target: /etc/ssl/private/selfsigned.key

  websocket_server_database:
    image: postgres:16-alpine
    container_name: ${WEBSOCKET_DB_CONTAINER_NAME}
    restart: always
    ports:
      - ${WEBSOCKET_DB_PORT}:${WEBSOCKET_DB_PORT}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: [ "postgres", "-c", "port=${WEBSOCKET_DB_PORT}" ]
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER -p ${WEBSOCKET_DB_PORT} -d $$POSTGRES_DB"
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - websocket_server_data:/var/lib/postgresql/data

  redis:
    container_name: redis-websocket-users
    image: redis:5
    ports:
      - "6380:6379"

  ## Internationalization services ##
  i18n_service:
    build: ./i18n_service
    container_name: i18n-service
    restart: always
    ports:
      - ${I18N_SERVICE_PORT}:${I18N_SERVICE_PORT}
    depends_on:
      i18n_service_database:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      PROJECT_NAME: "i18n_service"
      DEFAULT_LANGUAGE_CODE: ${DEFAULT_LANGUAGE_CODE}
      DATABASE_HOST: ${I18N_DB_CONTAINER_NAME}
      DATABASE_PORT: ${I18N_DB_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_SUPERUSER_EMAIL: ${ADMIN_EMAIL}
      DJANGO_SUPERUSER_USERNAME: ${ADMIN_USERNAME}
      DJANGO_SUPERUSER_PASSWORD: ${ADMIN_PASSWORD}
      HOST_IP: ${HOST_IP}
      APP_PORT: ${I18N_SERVICE_PORT}
      DJANGO_SECRET: ${DJANGO_SECRET_I18N}
    volumes:
      - type: bind
        source: ./i18n_service
        target: /i18n_service

  i18n_service_database:
    image: postgres:16-alpine
    container_name: ${I18N_DB_CONTAINER_NAME}
    restart: always
    ports:
      - ${I18N_DB_PORT}:${I18N_DB_PORT}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: [ "postgres", "-c", "port=${I18N_DB_PORT}" ]
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER -p ${I18N_DB_PORT} -d $$POSTGRES_DB"
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - i18n_service_data:/var/lib/postgresql/data

### lib build management ###
  libs_builder:
    build:
      context: ./libs
      args:
        MODE: build
    container_name: libs-builder
    restart: "no"
    volumes:
      - type: bind
        source: ./libs
        target: /libs
    profiles:
      - libs_management

  libs_cleaner:
    build:
      context: ./libs
      args:
        MODE: cleanup
    container_name: libs-cleaner
    restart: "no"
    volumes:
      - type: bind
        source: ./libs
        target: /libs
    profiles:
      - libs_management

### Volumes ###
volumes:
  # Apps
  website:
  users_service:
  pong_service:
  websocket_server:
  i18n_service:
  # Databases
  users_service_data:
  pong_service_data:
  websocket_server_data:
  i18n_service_data:
